{"version":3,"sources":["components/Habit.jsx","components/Navigation.jsx","components/Memo.jsx","components/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["Habit","Component","Navigation","Memo","props","memos","id","text","menu","console","log","this","map","memo","createMemo","Input","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLASeA,E,uKAJb,OAAO,kD,GAFWC,aCMLC,E,uKAJb,OAAO,uD,GAFgBD,aCiCVE,E,kDAhCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZ,CAAEC,GAAI,IAAKC,KAAM,oBAAqBC,KAAM,QAC5C,CAAEF,GAAI,IAAKC,KAAM,eAAgBC,KAAM,SACvC,CAAEF,GAAI,IAAKC,KAAM,iBAAkBC,KAAM,WALxB,E,0DASa,IAAnBF,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAEtB,OADAC,QAAQC,IAAIJ,EAAIC,EAAMC,GAErB,6BACC,4BACEF,EADF,MACSC,GAET,sCAAYC,M,+BAKL,IAAD,OACR,OAAOG,KAAKN,MAAMO,KAAI,SAACC,GAAD,OAAU,EAAKC,WAAWD,U,GAvB/BZ,aCMJc,E,uKAJb,OAAO,+C,GAFWd,aCGCe,E,uKAEnB,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAP6BhB,aCMbiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SD0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.ba569761.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nclass Habit extends Component {\n\trender() {\n\t\treturn <div>Habit section</div>;\n\t}\n}\n\nexport default Habit;\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nclass Navigation extends Component {\n\trender() {\n\t\treturn <div>navigation section</div>;\n\t}\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Memo extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.memos = [\n\t\t\t{ id: '1', text: 'you have to do ! ', menu: 'life' },\n\t\t\t{ id: '2', text: 'drink water ', menu: 'habit' },\n\t\t\t{ id: '3', text: 'go to the gym ', menu: 'health' },\n\t\t];\n\t}\n\n\tcreateMemo({ id, text, menu }) {\n\t\tconsole.log(id, text, menu);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>\n\t\t\t\t\t{id} : {text}\n\t\t\t\t</h3>\n\t\t\t\t<span>.... {menu}</span>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn this.memos.map((memo) => this.createMemo(memo));\n\t}\n}\n\nMemo.propTypes = {\n\tid: PropTypes.string.isRequired,\n\ttext: PropTypes.string.isRequired,\n\tmenu: PropTypes.string.isRequired,\n};\n\nexport default Memo;\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nclass Input extends Component {\n\trender() {\n\t\treturn <div>Input Form</div>;\n\t}\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport Habit from './components/Habit.jsx';\nimport Navigation from './components/Navigation.jsx';\nimport Memo from './components/Memo.jsx';\nimport Input from './components/Input.jsx';\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Habit />\n\t\t\t\t<Navigation />\n\t\t\t\t<Memo />\n\t\t\t\t<Input />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}